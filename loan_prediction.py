# -*- coding: utf-8 -*-
"""Loan Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1laY3yTrJv_iNT8JTvA7V1XnmH2sI8nfw
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

train = pd.read_csv('/content/drive/My Drive/Colab Notebooks/AnalyticVidhyaDataset/train_ctrUa4K.csv')
test = pd.read_csv('/content/drive/My Drive/Colab Notebooks/AnalyticVidhyaDataset/test_lAUu6dG.csv')

train_cp = train.copy()
test_cp = test.copy()

print(train_cp.shape)
print(test.shape)

train_cp.head()

train_cp.describe()

train_cp['Loan_Status'].value_counts()

print(train_cp.columns)

# plt.figure.Figure(figsize=(10,10))

# categorical varible analysis
plt.figure(1)
plt.subplot(221)
train_cp['Credit_History'].value_counts(normalize=True).plot.bar(figsize=(15,10), title= 'Credit History')
plt.subplot(222)
train_cp['Gender'].value_counts(normalize=True).plot.bar(title= 'Gender')
plt.subplot(223)
train_cp['Self_Employed'].value_counts(normalize=True).plot.bar(title= 'Self Employed')
plt.subplot(224)
train_cp['Married'].value_counts(normalize=True).plot.bar(title= 'Married')
plt.show()

# Ordinal varible analysis
plt.figure(1) 
plt.subplot(131) 
train_cp['Dependents'].value_counts(normalize=True).plot.bar(figsize=(15,6), title= 'Dependents') 
plt.subplot(132) 
train_cp['Education'].value_counts(normalize=True).plot.bar(title= 'Education') 
plt.subplot(133) 
train_cp['Property_Area'].value_counts(normalize=True).plot.bar(title= 'Property_Area') 
plt.show()

# Numerical variable analysis
plt.figure(1)
plt.subplot(221)
plt.hist(train_cp['ApplicantIncome'])
plt.subplot(222)
sns.distplot(train_cp['ApplicantIncome'])
plt.subplot(223) 
train_cp['ApplicantIncome'].plot.box(figsize=(10,5)) 
plt.subplot(224)
train_cp.boxplot(column='ApplicantIncome', by = 'Education')
plt.suptitle("")
plt.show()

plt.figure(1) 
plt.subplot(121) 
sns.distplot(train_cp['CoapplicantIncome']); 
plt.subplot(122) 
train_cp['CoapplicantIncome'].plot.box(figsize=(10,5)) 
plt.show()

plt.figure(1) 
plt.subplot(121) 
df=train.dropna() 
sns.distplot(df['LoanAmount']); 
plt.subplot(122) 
train['LoanAmount'].plot.box(figsize=(10,5)) 
plt.show()

# Bivariate Analysis

Gender=pd.crosstab(train_cp['Gender'],train_cp['Loan_Status'])

print(Gender)
print(Gender.columns)
print(Gender.sum(1))

Gender.div(Gender.sum(1).astype(float), axis=0).plot(kind="bar", stacked=True, figsize=(4,4))

Married = pd.crosstab(train_cp['Married'],train_cp['Loan_Status'])
Married.div(Married.sum(1).astype(float), axis=0).plot(kind="bar", stacked=True, figsize=(4,4))

Self_Employed = pd.crosstab(train_cp['Self_Employed'],train_cp['Loan_Status'])
Self_Employed.div(Self_Employed.sum(1).astype(float), axis=0).plot(kind="bar", stacked=True, figsize=(4,4))

Credit_History = pd.crosstab(train_cp['Credit_History'],train_cp['Loan_Status'])
Credit_History.div(Credit_History.sum(1).astype(float), axis=0).plot(kind="bar", stacked=True, figsize=(4,4))

Dependents = pd.crosstab(train_cp['Dependents'],train_cp['Loan_Status'])
Dependents.div(Dependents.sum(1).astype(float), axis=0).plot(kind="bar", stacked=True, figsize=(4,4))

Education = pd.crosstab(train_cp['Education'],train_cp['Loan_Status'])
Education.div(Education.sum(1).astype(float), axis=0).plot(kind="bar", stacked=True, figsize=(4,4))

Property_Area = pd.crosstab(train_cp['Property_Area'],train_cp['Loan_Status'])
Property_Area.div(Property_Area.sum(1).astype(float), axis=0).plot(kind="bar", stacked=True, figsize=(4,4))

train_cp.head()

train_cp.groupby('Loan_Status')['ApplicantIncome'].mean().plot.bar()

bins=[0,2500,4000,6000,81000] 
group=['Low','Average','High', 'Very high'] 
train_cp['Income_bin']=pd.cut(df['ApplicantIncome'],bins,labels=group)

Income_bin=pd.crosstab(train_cp['Income_bin'],train_cp['Loan_Status']) 
Income_bin.div(Income_bin.sum(1).astype(float), axis=0).plot(kind="bar", stacked=True) 
plt.xlabel('ApplicantIncome') 
P = plt.ylabel('Percentage')

train_cp['Total_Income']=train_cp['ApplicantIncome']+train_cp['CoapplicantIncome']

bins=[0,2500,4000,6000,81000] 
group=['Low','Average','High', 'Very high'] 

train_cp['Total_Income_bin']=pd.cut(train_cp['Total_Income'],bins,labels=group)

Total_Income_bin=pd.crosstab(train_cp['Total_Income_bin'],train_cp['Loan_Status']) 
Total_Income_bin.div(Total_Income_bin.sum(1).astype(float), axis=0).plot(kind="bar", stacked=True) 
plt.xlabel('Total_Income') 
P = plt.ylabel('Percentage')

train_cp.head()

bins=[0,100,200,700] 
group=['Low','Average','High'] 
train_cp['LoanAmount_bin']=pd.cut(df['LoanAmount'],bins,labels=group)

LoanAmount_bin=pd.crosstab(train_cp['LoanAmount_bin'],train_cp['Loan_Status']) 
LoanAmount_bin.div(LoanAmount_bin.sum(1).astype(float), axis=0).plot(kind="bar", stacked=True) 
plt.xlabel('LoanAmount') 
P = plt.ylabel('Percentage')

train_cp['Dependents'].replace('3+', 3,inplace=True) 
test_cp['Dependents'].replace('3+', 3,inplace=True) 
train_cp['Loan_Status'].replace('N', 0,inplace=True) 
train_cp['Loan_Status'].replace('Y', 1,inplace=True)

matrix = train_cp.corr() 
f, ax = plt.subplots(figsize=(9, 6)) 
sns.heatmap(matrix, vmax=.8, square=True, cmap="BuPu");

train_cp.isnull().sum()

train_cp['Gender'].fillna(train_cp['Gender'].mode()[0], inplace=True) 
train_cp['Married'].fillna(train_cp['Married'].mode()[0], inplace=True) 
train_cp['Dependents'].fillna(train_cp['Dependents'].mode()[0], inplace=True) 
train_cp['Self_Employed'].fillna(train_cp['Self_Employed'].mode()[0], inplace=True) 
train_cp['Credit_History'].fillna(train_cp['Credit_History'].mode()[0], inplace=True)

train_cp['Loan_Amount_Term'].value_counts()

train_cp['Loan_Amount_Term'].fillna(train_cp['Loan_Amount_Term'].mode()[0], inplace=True)

train_cp['LoanAmount'].fillna(train_cp['LoanAmount'].median(), inplace=True)

train_cp.isnull().sum()

test_cp['Gender'].fillna(train_cp['Gender'].mode()[0], inplace=True) 
test_cp['Dependents'].fillna(train_cp['Dependents'].mode()[0], inplace=True) 
test_cp['Self_Employed'].fillna(train_cp['Self_Employed'].mode()[0], inplace=True) 
test_cp['Credit_History'].fillna(train_cp['Credit_History'].mode()[0], inplace=True) 
test_cp['Loan_Amount_Term'].fillna(train_cp['Loan_Amount_Term'].mode()[0], inplace=True) 
test_cp['LoanAmount'].fillna(train_cp['LoanAmount'].median(), inplace=True)

test_cp.isnull().sum()

train_cp['LoanAmount_log'] = np.log(train_cp['LoanAmount']) 
train_cp['LoanAmount_log'].hist(bins=20) 
test_cp['LoanAmount_log'] = np.log(test_cp['LoanAmount'])

train.head()

train_cp1 = train_cp.copy()
test_cp1 = test_cp.copy()

train_cp1.head(20)

train_cp1.drop(['Loan_ID', 'ApplicantIncome', 'CoapplicantIncome', 'Income_bin', 'Total_Income_bin', 'LoanAmount_bin'], axis=1,inplace = True)

train_cp1['Gender'].replace(['Female','Male'], [0,1],inplace=True)
train_cp1['Married'].replace(['No','Yes'], [0,1],inplace=True)
train_cp1['Education'].replace(['Not Graduate','Graduate'],[0,1],inplace=True)
train_cp1['Self_Employed'].replace(['No','Yes'], [0,1],inplace=True)
train_cp1['Property_Area'].replace(['Urban','Semiurban', 'Rural'], [0,1,2], inplace=True)

